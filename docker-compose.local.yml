version: "3"

services:
    api-server:
        container_name: api-server
        build:
            context: .
            dockerfile: ./services/api/Dockerfile.api
        tty: true
        command: >
            sh -c "python3 manage.py wait_for_db &&
                  python3 manage.py makemigrations &&
                  python3 manage.py migrate &&
                  daphne backend.asgi:application -p 8000 -b 0.0.0.0"
        volumes:
            - ~/uploads:/app/uploads
            - .:/app
        expose:
            - 8000
        env_file:
            - .env
        environment:
            - ALLOWED_HOSTS=${ALLOWED_HOSTS}
            - ANDROID_CLIENT_ID=${ANDROID_CLIENT_ID}
            - DB_HOST=${DB_HOST}
            - DJANGO_SUPERUSER_EMAIL=${DJANGO_SUPERUSER_EMAIL}
            - DJANGO_SUPERUSER_FIRST_NAME=${DJANGO_SUPERUSER_FIRST_NAME}
            - DJANGO_SUPERUSER_LAST_NAME=${DJANGO_SUPERUSER_LAST_NAME}
            - DJANGO_SUPERUSER_PASSWORD=${DJANGO_SUPERUSER_PASSWORD}
            - DJANGO_SUPERUSER_USERNAME=${DJANGO_SUPERUSER_USERNAME}
            - IOS_CLIENT_ID=${IOS_CLIENT_ID}
            - PORT=${PORT}
            - POSTGRES_USER=${POSTGRES_USER}
            - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
            - POSTGRES_DB=${POSTGRES_DB}
            - SECRET_KEY=${SECRET_KEY}
            - TEST_POSTGRES_DB=${TEST_POSTGRES_DB}
            - WEB_CLIENT_ID=${WEB_CLIENT_ID}
            - WEB_CLIENT_SECRET=${WEB_CLIENT_SECRET}
            - TWILIO_ACCOUNT_SID=${TWILIO_ACCOUNT_SID}
            - TWILIO_AUTH_TOKEN=${TWILIO_AUTH_TOKEN}
            - TWILIO_PHONE_NUMBER=${TWILIO_PHONE_NUMBER}
        depends_on:
            - redis
            - celery
        networks:
            micro-services-network:
                ipv4_address: 192.168.0.3

    nginx:
        container_name: api-gateway
        build:
            context: ./services/nginx/
        ports:
            - "80:80"
        volumes:
            # Only mount the local.conf file we just created
            - ./services/nginx/conf.d/local.conf:/etc/nginx/conf.d/default.conf
        depends_on:
            - api-server
        networks:
            micro-services-network:
                ipv4_address: 192.168.0.5

    redis:
        container_name: redis-server
        build:
            context: ./services/redis/
        ports:
            - "6379:6379"
        networks:
            micro-services-network:
                ipv4_address: 192.168.0.6

    celery:
        container_name: celery_worker
        build:
            context: .
            dockerfile: ./services/celery/Dockerfile.worker
        command: celery -A backend worker -l info
        volumes:
            - ~/uploads:/app/uploads
            - .:/app
        depends_on:
            - redis
        env_file:
            - .env
        environment:
            - ALLOWED_HOSTS=${ALLOWED_HOSTS}
            - DB_HOST=${DB_HOST}
            - PORT=${PORT}
            - POSTGRES_USER=${POSTGRES_USER}
            - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
            - POSTGRES_DB=${POSTGRES_DB}
            - SECRET_KEY=${SECRET_KEY}
            - TEST_POSTGRES_DB=${TEST_POSTGRES_DB}
        networks:
            micro-services-network:
                ipv4_address: 192.168.0.7

    celery-beat:
        container_name: celery_beat
        build:
            context: .
            dockerfile: ./services/celery/Dockerfile.beat
        command: celery -A backend beat -l info
        volumes:
            - ~/uploads:/app/uploads
            - .:/app
        depends_on:
            - redis
            - celery
        env_file:
            - .env
        environment:
            - ALLOWED_HOSTS=${ALLOWED_HOSTS}
            - DB_HOST=${DB_HOST}
            - PORT=${PORT}
            - POSTGRES_USER=${POSTGRES_USER}
            - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
            - POSTGRES_DB=${POSTGRES_DB}
            - SECRET_KEY=${SECRET_KEY}
            - TEST_POSTGRES_DB=${TEST_POSTGRES_DB}
        networks:
            micro-services-network:
                ipv4_address: 192.168.0.8

networks:
    micro-services-network:
        driver: bridge
        ipam:
            config:
                - subnet: 192.168.0.0/24
