version: "3"

services:
    postgres-db:
        container_name: postgres-db-test
        build:
            context: ./services/db/
        env_file:
            - .env
        ports:
            - "5432:5432"
        volumes:
            - ~/postgres_store_test:/var/lib/postgresql/data
        networks:
            micro-services-network:
                ipv4_address: 192.168.0.10
        healthcheck:
            test:
                [
                    "CMD-SHELL",
                    "pg_isready -U ${POSTGRES_USER} -d ${TEST_POSTGRES_DB}",
                ]
            interval: 5s
            timeout: 5s
            retries: 5

    api-server:
        container_name: api-server-test
        build:
            context: .
            dockerfile: ./services/api/Dockerfile.api
        tty: true
        command: tail -f /dev/null # Keep container running
        volumes:
            - .:/app   # Mount the entire project directory to watch file changes
            - ~/uploads_test:/app/uploads
        expose:
            - 8000
        env_file:
            - .env
        environment:
            - ALLOWED_HOSTS=${ALLOWED_HOSTS}
            - ANDROID_CLIENT_ID=${ANDROID_CLIENT_ID}
            - DB_HOST=postgres-db
            - DJANGO_SUPERUSER_EMAIL=${DJANGO_SUPERUSER_EMAIL}
            - DJANGO_SUPERUSER_FIRST_NAME=${DJANGO_SUPERUSER_FIRST_NAME}
            - DJANGO_SUPERUSER_LAST_NAME=${DJANGO_SUPERUSER_LAST_NAME}
            - DJANGO_SUPERUSER_PASSWORD=${DJANGO_SUPERUSER_PASSWORD}
            - DJANGO_SUPERUSER_USERNAME=${DJANGO_SUPERUSER_USERNAME}
            - IOS_CLIENT_ID=${IOS_CLIENT_ID}
            - PORT=${PORT}
            - POSTGRES_USER=${POSTGRES_USER}
            - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
            - POSTGRES_DB=${TEST_POSTGRES_DB}
            - SECRET_KEY=${SECRET_KEY}
            - WEB_CLIENT_ID=${WEB_CLIENT_ID}
            - WEB_CLIENT_SECRET=${WEB_CLIENT_SECRET}
            - REDIS_HOST=redis
        depends_on:
            postgres-db:
                condition: service_healthy
            redis:
                condition: service_healthy
        networks:
            micro-services-network:
                ipv4_address: 192.168.0.11

    redis:
        container_name: redis-server-test
        build:
            context: ./services/redis/
        ports:
            - "6370:6370"
        networks:
            micro-services-network:
                ipv4_address: 192.168.0.12
        volumes:
            - ~/redis_data_test:/data
        healthcheck:
            test: ["CMD", "redis-cli", "ping"]
            interval: 5s
            timeout: 5s
            retries: 5

networks:
    micro-services-network:
        ipam:
            driver: default
            config:
                - subnet: "192.168.0.0/24"
                  gateway: "192.168.0.1"
