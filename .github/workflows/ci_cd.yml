name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  cleanup:
    runs-on: self-hosted
    steps:
      - name: Free up disk space and clean workspace
        run: |
          docker system prune -af
          docker volume prune -f
          df -h
          sudo find /home/ec2-user/actions-runner/_work/Mapapi -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true
          sudo find /home/ec2-user/actions-runner/_work/Mapapi -name "*.pyc" -exec rm -f {} + 2>/dev/null || true
          sudo chown -R ec2-user:ec2-user /home/ec2-user/actions-runner/_work/Mapapi || true
          sudo chmod -R 755 /home/ec2-user/actions-runner/_work/Mapapi || true

  deploy:
    needs: cleanup
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: self-hosted
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Create .env file
        run: |
          {
            echo "ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }}"
            echo "ANDROID_CLIENT_ID=${{ secrets.ANDROID_CLIENT_ID }}"
            echo "DB_HOST=${{ secrets.DB_HOST }}"
            echo "DJANGO_SUPERUSER_EMAIL=${{ secrets.DJANGO_SUPERUSER_EMAIL }}"
            echo "DJANGO_SUPERUSER_FIRST_NAME=${{ secrets.DJANGO_SUPERUSER_FIRST_NAME }}"
            echo "DJANGO_SUPERUSER_LAST_NAME=${{ secrets.DJANGO_SUPERUSER_LAST_NAME }}"
            echo "DJANGO_SUPERUSER_PASSWORD=${{ secrets.DJANGO_SUPERUSER_PASSWORD }}"
            echo "DJANGO_SUPERUSER_USERNAME=${{ secrets.DJANGO_SUPERUSER_USERNAME }}"
            echo "IOS_CLIENT_ID=${{ secrets.IOS_CLIENT_ID }}"
            echo "PORT=${{ secrets.PORT }}"
            echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}"
            echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}"
            echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}"
            echo "SECRET_KEY=${{ secrets.SECRET_KEY }}"
            echo "TEST_POSTGRES_DB=${{ secrets.TEST_POSTGRES_DB }}"
            echo "WEB_CLIENT_ID=${{ secrets.WEB_CLIENT_ID }}"
            echo "WEB_CLIENT_SECRET=${{ secrets.WEB_CLIENT_SECRET }}"
            echo "TWILIO_ACCOUNT_SID=${{ secrets.TWILIO_ACCOUNT_SID }}"
            echo "TWILIO_AUTH_TOKEN=${{ secrets.TWILIO_AUTH_TOKEN }}"
            echo "TWILIO_PHONE_NUMBER=${{ secrets.TWILIO_PHONE_NUMBER }}"
            echo "SUPABASE_URL=${{ secrets.SUPABASE_URL }}"
            echo "SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY }}"
            echo "USE_SUPABASE_STORAGE=${{ secrets.USE_SUPABASE_STORAGE }}"
            echo "EMAIL_HOST=${{ secrets.EMAIL_HOST }}"
            echo "EMAIL_HOST_USER=${{ secrets.EMAIL_HOST_USER }}"
            echo "EMAIL_HOST_PASSWORD=${{ secrets.EMAIL_HOST_PASSWORD }}"
          } > .env

      - name: Build and Deploy Docker Image
        run: |
          docker compose -f _cd_pipeline.yml build
          docker compose -f _cd_pipeline.yml down --remove-orphans
          docker compose -f _cd_pipeline.yml up --build -d

      - name: Post-deployment cleanup
        if: always()
        run: |
          docker system prune -af --volumes
          docker image prune -af
          docker volume prune -f
